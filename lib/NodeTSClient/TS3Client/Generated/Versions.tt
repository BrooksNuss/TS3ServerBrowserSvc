// TS3Client - A free TeamSpeak3 client implementation
// Copyright (C) 2017  TS3Client contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualBasic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualBasic.FileIO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#
string declFilePath = Host.ResolvePath("../Declarations/Versions.csv");
var data = new List<string[]>();
using (TextFieldParser parser = new TextFieldParser(declFilePath))
{
	parser.TextFieldType = FieldType.Delimited;
	parser.SetDelimiters(",");
	while (!parser.EndOfData)
		data.Add(parser.ReadFields());
}
var dict = new Dictionary<string, Ver> {
	{ "Windows", new Ver { plat = "WIN", enu = "Windows" } },
	{ "Linux", new Ver { plat = "LIN", enu = "Linux" } },
	{ "OS X", new Ver { plat = "OSX", enu = "Osx" } },
	{ "Android", new Ver { plat = "AND", enu = "Android" } },
	{ "iOS", new Ver { plat = "IOS", enu = "Ios" } },
};
var reg = new Regex(@"^(\d(?:\.[\d?]+)+)");
string BuildToFld(string build)
{
	var m = reg.Match(build);
	return string.Join("_", m.Groups[1].Value.Split('.').Select(x => x.Replace("?", "X")));
}
#>

namespace TS3Client.Full
{
	using System;

	/// <summary>
	/// Describes a triple of version, platform and a cryptographical signature (usually distributed by "TeamSpeak Systems").
	/// Each triple has to match and is not interchangeable with other triple parts.
	/// </summary>
	public sealed class VersionSign
	{
		private static readonly string[] Platforms = { null, "Windows", "Linux", "OS X", "Android", "iOS" };

		public string Sign { get; }
		public string Name { get; }
		public ClientPlatform Platform { get; }
		public string PlatformName { get; }

		public VersionSign(string name, ClientPlatform platform, string sign)
		{
			if (platform == ClientPlatform.Other)
				throw new ArgumentException(nameof(platform));
			Name = name;
			Sign = sign;
			Platform = platform;
			PlatformName = Platforms[(int)platform];
		}

		public VersionSign(string name, string platform, string sign)
		{
			Name = name;
			Sign = sign;
			Platform = ClientPlatform.Other;
			PlatformName = platform;
		}

		public bool CheckValid() => Ts3Crypt.EdCheck(this);

		// ReSharper disable InconsistentNaming, UnusedMember.Global<# 
		var header = data[0];
		int ichan = Array.IndexOf(header, "channel");
		int iname = Array.IndexOf(header, "version");
		int iplat = Array.IndexOf(header, "platform");
		int ihash = Array.IndexOf(header, "hash");
		var duplicates = new HashSet<string>();

		foreach (var line in data.Skip(1).Reverse()) {
			var ver = dict[line[iplat]];
			var fldName = $"VER_{ver.plat}_{BuildToFld(line[iname])}";
			if (duplicates.Contains(fldName))
				continue;
			duplicates.Add(fldName);
		#>
		public static VersionSign <#= fldName #> { get; } = new VersionSign("<#= line[iname] #>", ClientPlatform.<#= ver.enu #>, "<#= line[ihash] #>");<# } #>
		// ReSharper restore InconsistentNaming, UnusedMember.Global
	}

	public enum ClientPlatform
	{
		Other = 0,
		Windows,
		Linux,
		Osx,
		Android,
		Ios,
	}
}
<#+ class Ver
{
	public string plat;
	public string enu;
}
#>